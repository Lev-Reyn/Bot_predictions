from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InputFile  # –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã
from config import token
from work_with_data_users.work_with_data_users import WorkWithDataUsers
import aioschedule
import asyncio
from mytime.mytime import MyTime  # –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
from work_with_data_users.in_json import InJsonDict, InZIP

bot = Bot(token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

time_predications = '10:14'  # –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è


@dp.message_handler(commands=['start'])
async def start_process_command(message: types.Message):
    """–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    (–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫, —á—Ç–æ –±—ã —Å–æ–±–∏—Ä–∞–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞ (full_name, username, is_premium –∏ —Ç.–¥.)"""
    await message.delete()
    WorkWithDataUsers(message.from_user.id)
    await bot.send_message(message.from_user.id,
                           f"{message.from_user.full_name}, —ç—Ç–æ –±–æ—Ç —Ö–º–µ–ª—å–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤, –Ω–æ –≤ —Ç–µ–ª–µ–≥–µ —è –±—É–¥—É –¥–Ω–µ–≤–Ω—ã–º üò±, "
                           f"–≤ –æ–±—â–µ–º, —è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é –±—É–¥—É—â–µ–µ, –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–∏ "
                           f"—Ç–µ–±—è –º–æ–≥—É—Ç –∏—Å–ø—É–≥–∞—Ç—å, —Ç–∞–∫ —á—Ç–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–π"
                           f" –∏ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ https://vk.com/bomji.sarapul" + ", —Ç–æ —Ç—ã –ë–û–ú–ñ... –∏–ª–∏ –°–û–ú–ñ")
    WorkWithDataUsers(message.from_user.id).add_info_about_user_statistics(count_touch_start=True,
                                                                           username=message.from_user.username,
                                                                           full_name=message.from_user.full_name,
                                                                           work_or_stop='+')


@dp.message_handler(commands=['send_prediction'])
async def send_predictions_process_command(message: types.Message):
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∑–∞—Ä–µ–≥–∞–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

    –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ –±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ —Å–ª–æ–≤–æ –≥–µ–π–æ—Ä–≥–∏–π"""
    if '–≥–µ–π–æ—Ä–≥–∏–π' not in message.text:
        return None
    # print(message.text)
    for user_telegram_id in WorkWithDataUsers(message.from_user.id).get_all_users():
        try:
            await bot.send_message(user_telegram_id, WorkWithDataUsers(user_telegram_id).get_prediction())
            WorkWithDataUsers(user_telegram_id).add_info_about_user_statistics(work_or_stop='+')
        except BotBlocked:
            # –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞, –∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–¥–∞–ª—è—Ç—å –∏—Ö, —Ö–∑
            WorkWithDataUsers(user_telegram_id).add_info_about_user_statistics(work_or_stop='-')
            print(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_telegram_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞')


@dp.message_handler(commands=['help'])
async def help_process_command(message: types.Message):
    WorkWithDataUsers(message.from_user.id).add_info_about_user_statistics(count_touch_help=True,
                                                                           username=message.from_user.username,
                                                                           full_name=message.from_user.full_name,
                                                                           work_or_stop='+')
    await bot.send_message(message.from_user.id, f'{message.from_user.full_name}, –ø–æ–º–æ—â–∏ –Ω–µ—Ç, —Ö–º–µ–ª—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–≤–æ–π'
                                                 f' –≤—ã—Ö–æ–¥ https://vk.com/bomji.sarapul')


@dp.message_handler(commands=['next_prediction'])
async def next_prediction_process_command(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'—Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ '
                           f'–±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {MyTime(time_predications).next_prediction_declensions_func()}üôä '
                           f'–Ω–æ –ø–æ–º–Ω–∏, —á—Ç–æ –±—ã–≤–∞—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è üë∫')
    WorkWithDataUsers(message.from_user.id).add_info_about_user_statistics(count_touch_next_prediction=True,
                                                                           username=message.from_user.username,
                                                                           full_name=message.from_user.full_name,
                                                                           work_or_stop='+')


@dp.message_handler(commands=['get_info_about_users'])
async def get_info_about_users_process_command(message: types.Message):
    """–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:
     –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     –∏—Ö telegram_id
     count_predictions
     –º–æ–∂–µ—Ç –ø–æ—Ç–æ–º –µ—â—ë, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç —Ç–∞–∫ –∂–µ

     –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ –±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ —Å–ª–æ–≤–æ –≥–µ–π–æ—Ä–≥–∏–π
     """
    if '–≥–µ–π–æ—Ä–≥–∏–π' not in message.text:
        return None
    WorkWithDataUsers(message.from_user.id).get_real_users()
    await bot.send_message(message.from_user.id,
                           f'number of users real {WorkWithDataUsers(message.from_user.id).get_real_users()}')
    await bot.send_message(message.from_user.id,
                           f'number of users all {len(WorkWithDataUsers(message.from_user.id).get_info_about_users())}')
    WorkWithDataUsers(message.from_user.id).create_csv_info_about_users()
    path = 'data_info_about_user.csv'
    await message.answer_document(InputFile(path))


@dp.message_handler(commands=['get_statistics_about_users'])
async def get_statistics_about_users_process_command(message: types.Message):
    """–ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —é–∑–µ—Ä–∞—Ö """
    if '–≥–µ–π–æ—Ä–≥–∏–π' not in message.text:
        return None
    await bot.send_message(message.from_user.id, '–¥–≤–∞ –≤–∏–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤ json —Ñ–æ—Ä–º–∞—Ç–µ –∏ csv')
    await message.answer_document(InputFile('data_users/statistics/data_about_users_statistics.json'))

    InJsonDict('data_users/statistics/data_about_users_statistics.json').json_in_csv(
        'data_users/statistics/data_about_users_statistics.csv',
        key_one=str(message.from_user.id))
    await message.answer_document(InputFile('data_users/statistics/data_about_users_statistics.csv'))


@dp.message_handler(commands=['get_zipfile_sent_predictions_users'])
async def get_zipfile_sent_predictions_users_process_command(message: types.Message):
    """–ø–æ–ª—É—á–∏—Ç—å zipfile –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–∞–º"""
    if '–≥–µ–π–æ—Ä–≥–∏–π' not in message.text:
        return None
    # –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ zip —Ñ–∞–π–ª –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ data_users/sent_predictions_users
    InZIP('data_users/sent_predictions_users.zip').create_zip('data_users/sent_predictions_users')
    await message.answer_document(InputFile('data_users/sent_predictions_users.zip'))


# @dp.message_handler()
async def timer_no_command():
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∑–∞—Ä–µ–≥–∞–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    print('pizda')
    for user_telegram_id in WorkWithDataUsers('664295561').get_all_users():
        try:
            await bot.send_message(user_telegram_id, WorkWithDataUsers(user_telegram_id).get_prediction())
            WorkWithDataUsers(user_telegram_id).add_info_about_user_statistics(work_or_stop='+')

        except BotBlocked:
            # –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞, –∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–¥–∞–ª—è—Ç—å –∏—Ö, —Ö–∑
            print(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_telegram_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞')
            WorkWithDataUsers(user_telegram_id).add_info_about_user_statistics(work_or_stop='-')


async def scheduler():
    aioschedule.every().day.at(time_predications).do(timer_no_command)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(5)


async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    # executor.start_polling(dp)
    # executor.start_polling(dp, skip_updates=True, on_startup=scheduler)
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)

# async def scheduler(m):
#     """–ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
#     aioschedule.every().day.at("11:08").do(start_process_command_no_command)
#     while True:
#         await aioschedule.run_pending()
#         await asyncio.sleep(1)



# –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å get_info_about_users, —á—Ç–æ –±—ã —Å—á–∏—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
# —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–æ—Ç–∞ —É–¥–∞–ª—ë–Ω–Ω–æ
# —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω—Å–∫—É—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –≤ –±–æ—Ç–µ
